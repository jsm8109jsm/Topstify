"use client";

import { QueryClient, QueryClientProvider } from "react-query";
import "./globals.css";
import instance from "@/utils/instance";
import { useEffect } from "react";
import { Noto_Sans_KR } from "next/font/google";

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const NotoSansKR = Noto_Sans_KR({
  subsets: ["latin"],
  display: "swap",
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const queryClient = new QueryClient({
    defaultOptions: { queries: { retry: false }, mutations: { retry: false } },
  });
  useEffect(() => {
    document.documentElement.classList.add("dark");
  }, []);

  instance.interceptors.response.use(
    (res) => res,
    async (error) => {
      const originalRequest = error.config;
      // console.log(error);
      // if (typeof localStorage.refresh_token === "undefined") {
      //   return Promise.reject(error);
      // }
      if (typeof localStorage.refreshToken === "undefined") {
        return Promise.reject(error);
      }
      if (!localStorage.refreshToken) {
        // setIsNeedLogin(true);
        localStorage.removeItem("accessToken");
        return Promise.reject(error);
      }
      // eslint-disable-next-line no-underscore-dangle
      if (error.response.status === 401 && !originalRequest._retry) {
        // const refreshToken = localStorage.refresh_token;
        // eslint-disable-next-line no-underscore-dangle
        originalRequest._retry = true;
        const response = await instance.post("refresh", {
          refreshToken: localStorage.refreshToken,
        });

        if (response.status === 200) {
          console.log(response);
          const { accessToken } = response.data;
          localStorage.setItem("accessToken", accessToken);
          originalRequest.headers.Authorization = `Bearer ${accessToken}`;
          return instance(originalRequest);
        }
        // setIsNeedLogin(true);
      }

      return Promise.reject(error);
    },
  );
  return (
    <html lang="ko">
      <body className={`${NotoSansKR.className}`}>
        <QueryClientProvider client={queryClient}>
          {children}
        </QueryClientProvider>
      </body>
    </html>
  );
}
